import express from "express";
import { body, param, validationResult } from "express-validator";
import { authMiddleware } from "../middleware/authMiddleware.js";
import { requireRole } from "../middleware/roleMiddleware.js"; // ‚¨ÖÔ∏è IMPORT CRITIQUE
import {
  createFreelanceMission,
  applyToMission,
  deliverWork,
  validateDelivery
} from "../controllers/freelanceController.js";

const router = express.Router();

// üõ† Utilitaire pour validation des requ√™tes
const validateRequest = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) return res.status(400).json({ success: false, errors: errors.array() });
  next();
};

// ========================
// ‚úÖ Cr√©er une mission (ACHETEUR/ADMIN)
// ========================
router.post(
  "/missions",
  authMiddleware,
  requireRole(["ACHETEUR", "ADMIN"]), // ‚¨ÖÔ∏è S√âCURIT√â PAR R√îLE
  body("title").isString().notEmpty().withMessage("Le titre est obligatoire"),
  body("description").isString().notEmpty().withMessage("La description est obligatoire"),
  body("budget").isFloat({ min: 1 }).withMessage("Le budget doit √™tre un nombre positif (minimum 1)"),
  body("deadline").optional().isISO8601().withMessage("Format de date invalide"),
  validateRequest,
  createFreelanceMission
);

// ========================
// ‚úÖ Postuler √† une mission (VENDEUR/ADMIN)
// ========================
router.post(
  "/missions/:id/apply",
  authMiddleware,
  requireRole(["VENDEUR", "ADMIN"]), // ‚¨ÖÔ∏è S√âCURIT√â PAR R√îLE
  param("id").isUUID().withMessage("ID de mission invalide"),
  body("proposal").isString().notEmpty().withMessage("La proposition est obligatoire"),
  body("proposed_price").isFloat({ min: 1 }).withMessage("Le prix propos√© doit √™tre un nombre positif (minimum 1)"),
  validateRequest,
  applyToMission
);

// ========================
// ‚úÖ Livrer un travail (VENDEUR/ADMIN)
// La v√©rification que le VENDEUR est celui assign√© √† la mission se fera dans le Controller.
// ========================
router.post(
  "/missions/:id/deliver",
  authMiddleware,
  requireRole(["VENDEUR", "ADMIN"]), // ‚¨ÖÔ∏è S√âCURIT√â PAR R√îLE
  param("id").isUUID().withMessage("ID de mission invalide"),
  // Le champ 'file_url' du sch√©ma 'freelance_deliveries' indique qu'on devrait avoir un lien.
  body("file_url").isURL().withMessage("L'URL du fichier de livraison est obligatoire et doit √™tre valide"),
  body("delivery_note").isString().notEmpty().withMessage("Une note de livraison est requise"),
  validateRequest,
  deliverWork
);

// ========================
// ‚úÖ Valider une livraison (ACHETEUR/ADMIN)
// L'acheteur doit √™tre celui qui a cr√©√© la mission. V√©rification dans le Controller.
// ========================
router.put(
  "/missions/:missionId/deliveries/:deliveryId/validate",
  authMiddleware,
  requireRole(["ACHETEUR", "ADMIN"]), // ‚¨ÖÔ∏è S√âCURIT√â PAR R√îLE
  param("missionId").isUUID().withMessage("ID de mission invalide"),
  param("deliveryId").isUUID().withMessage("ID de livraison invalide"),
  validateRequest,
  validateDelivery
);

export default router;
